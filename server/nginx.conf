http {
    
    upstream allbackend {
        # ip_hash; #only takes into account the first three octets of the ipv4 address wich didn't help us as we are running both servers on the same ip and everyone got redirected to the same server
        # hash $remote_addr consistent; #might have been a better alternative at is uses the entire IP to hash although sticky is still better
        
        server web1:2222;
        server web2:3333;
        # following is used due to the fact that the Nginx iamge we are using is compiled with the sticky session module 
        sticky name=node_sticky expires=10d domain=.yourdomain.net path=/ httponly secure;
    }


    server {
            listen 80;
            listen 443 ssl;

            client_max_body_size 10M;
            
            ssl_certificate /etc/letsencrypt/live/storeserverapi.yourdomain.net/fullchain.pem;
            
            ssl_certificate_key /etc/letsencrypt/live/storeserverapi.yourdomain.net/privkey.pem;
            
        #     this project does not use socket.io for now
        #     location /socket.io/ {
        #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #         proxy_set_header Host $host;

        #         proxy_pass http://allbackend;

        #         proxy_http_version 1.1;
        #         proxy_set_header Upgrade $http_upgrade;
        #         proxy_set_header Connection "upgrade";
        #    }

          location / {
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header Host $host;
                proxy_set_header X-Forwarded-Proto $scheme; 
                
                proxy_pass http://allbackend/;

                proxy_http_version 1.1;
           }
    
     }



}

events { } 